//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Data/Input/VisualizerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VisualizerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VisualizerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VisualizerControls"",
    ""maps"": [
        {
            ""name"": ""ModelManipulation"",
            ""id"": ""670e2e66-5e62-4ad8-bb98-4206ab587405"",
            ""actions"": [
                {
                    ""name"": ""MoveDrag"",
                    ""type"": ""Value"",
                    ""id"": ""b83345b2-8e85-4dc3-9176-c4ce8c3b3b5b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DragActive"",
                    ""type"": ""Value"",
                    ""id"": ""69450ceb-31a8-4f83-9a54-03ebc0e2c0e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e841f84-56f5-48bb-818c-04aeebe29cee"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1976be33-3273-400b-8851-77fdddd7b1c6"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragActive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ModelManipulation
        m_ModelManipulation = asset.FindActionMap("ModelManipulation", throwIfNotFound: true);
        m_ModelManipulation_MoveDrag = m_ModelManipulation.FindAction("MoveDrag", throwIfNotFound: true);
        m_ModelManipulation_DragActive = m_ModelManipulation.FindAction("DragActive", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ModelManipulation
    private readonly InputActionMap m_ModelManipulation;
    private IModelManipulationActions m_ModelManipulationActionsCallbackInterface;
    private readonly InputAction m_ModelManipulation_MoveDrag;
    private readonly InputAction m_ModelManipulation_DragActive;
    public struct ModelManipulationActions
    {
        private @VisualizerControls m_Wrapper;
        public ModelManipulationActions(@VisualizerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveDrag => m_Wrapper.m_ModelManipulation_MoveDrag;
        public InputAction @DragActive => m_Wrapper.m_ModelManipulation_DragActive;
        public InputActionMap Get() { return m_Wrapper.m_ModelManipulation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ModelManipulationActions set) { return set.Get(); }
        public void SetCallbacks(IModelManipulationActions instance)
        {
            if (m_Wrapper.m_ModelManipulationActionsCallbackInterface != null)
            {
                @MoveDrag.started -= m_Wrapper.m_ModelManipulationActionsCallbackInterface.OnMoveDrag;
                @MoveDrag.performed -= m_Wrapper.m_ModelManipulationActionsCallbackInterface.OnMoveDrag;
                @MoveDrag.canceled -= m_Wrapper.m_ModelManipulationActionsCallbackInterface.OnMoveDrag;
                @DragActive.started -= m_Wrapper.m_ModelManipulationActionsCallbackInterface.OnDragActive;
                @DragActive.performed -= m_Wrapper.m_ModelManipulationActionsCallbackInterface.OnDragActive;
                @DragActive.canceled -= m_Wrapper.m_ModelManipulationActionsCallbackInterface.OnDragActive;
            }
            m_Wrapper.m_ModelManipulationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveDrag.started += instance.OnMoveDrag;
                @MoveDrag.performed += instance.OnMoveDrag;
                @MoveDrag.canceled += instance.OnMoveDrag;
                @DragActive.started += instance.OnDragActive;
                @DragActive.performed += instance.OnDragActive;
                @DragActive.canceled += instance.OnDragActive;
            }
        }
    }
    public ModelManipulationActions @ModelManipulation => new ModelManipulationActions(this);
    public interface IModelManipulationActions
    {
        void OnMoveDrag(InputAction.CallbackContext context);
        void OnDragActive(InputAction.CallbackContext context);
    }
}
